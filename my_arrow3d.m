function my_arrow3d(m,r, value)

% generated by gpt4

% Define the starting point
x0 = m(1);
y0 = m(2);
z0 = m(3);

% Define the arrow vector components
u = r(1);
v = r(2);
w = r(3);

% Arrow stem parameters
stemRadius = 0.05;
stemLength = sqrt(u^2 + v^2 + w^2);

% Arrowhead parameters
headRadius = 0.09;
headLength = stemLength * 0.15;

% Create a cylinder for the stem
[X, Y, Z] = cylinder(stemRadius, 20);
Z = Z * (stemLength - headLength);

C = zeros(size(Z)) + value;

% Rotate and translate the cylinder
hStem = surf(X, Y, Z, C); hold on;
rotate(hStem, [0 0 1], atan2d(v, u), [0 0 0]);
rotate(hStem, [u v 0], -acosd(w/stemLength), [0 0 0]);
set(hStem, 'XData', get(hStem, 'XData') + x0);
set(hStem, 'YData', get(hStem, 'YData') + y0);
set(hStem, 'ZData', get(hStem, 'ZData') + z0);


% Create a cone for the head
[X, Y, Z] = cylinder(linspace(headRadius,0,20), 20);
Z = Z * headLength + (stemLength - headLength);
C = zeros(size(Z)) + value;

% Rotate and translate the cone
hStem = surf(X, Y, Z, C); hold on;
rotate(hStem, [0 0 1], atan2d(v, u), [0 0 0]);
rotate(hStem, [u v 0], -acosd(w/stemLength), [0 0 0]);
set(hStem, 'XData', get(hStem, 'XData') + x0);
set(hStem, 'YData', get(hStem, 'YData') + y0);
set(hStem, 'ZData', get(hStem, 'ZData') + z0);


